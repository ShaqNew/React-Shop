{"ast":null,"code":"// ***********************************************************\n// This example support/component.ts is processed and\n// loaded automatically before your test files.\n//\n// This is a great place to put global configuration and\n// behavior that modifies Cypress.\n//\n// You can change the location of this file or turn off\n// automatically serving support files with the\n// 'supportFile' configuration option.\n//\n// You can read more here:\n// https://on.cypress.io/configuration\n// ***********************************************************\n\n// Import commands.js using ES2015 syntax:\nimport './commands';\n\n// Alternatively you can use CommonJS syntax:\n// require('./commands')\n\nimport { mount } from 'cypress/react18';\n// import { Provider } from 'react-redux'\n// import { getStore } from '../../src/store'\n\n// Cypress.Commands.add('mount', (component, options = {}) => {\n//   // Use the default store if one is not provided\n//   const { reduxStore = getStore(), ...mountOptions } = options\n\n//   const wrapped = <Provider store={reduxStore}>{component}</Provider>\n\n//   return mount(wrapped, mountOptions)\n// })\n\n// Augment the Cypress namespace to include type definitions for\n// your custom command.\n// Alternatively, can be defined in cypress/support/component.d.ts\n// with a <reference path=\"./component\" /> at the top of your spec.\n\nCypress.Commands.add('mount', mount);\n\n// Cypress.Commands.add('mount', (component: React.ReactNode, options = {}) => {\n//   // Use defailt store if none are provided.\n//   const { reduxStore = getStore(), ...mountOptions } = options;\n\n//   const wrappedComponent = <Provider store={reduxStore}><>{component}</></Provider>;\n//   return mount(wrappedComponent, mountOptions);\n// });\n\n// Example use:\n// cy.mount(<MyComponent />)","map":{"version":3,"names":["mount","Cypress","Commands","add"],"sources":["/Users/snewell/Documents/practice/React_shop_copy/react-shop/cypress/support/component.ts"],"sourcesContent":["// ***********************************************************\n// This example support/component.ts is processed and\n// loaded automatically before your test files.\n//\n// This is a great place to put global configuration and\n// behavior that modifies Cypress.\n//\n// You can change the location of this file or turn off\n// automatically serving support files with the\n// 'supportFile' configuration option.\n//\n// You can read more here:\n// https://on.cypress.io/configuration\n// ***********************************************************\n\n// Import commands.js using ES2015 syntax:\nimport './commands'\n\n// Alternatively you can use CommonJS syntax:\n// require('./commands')\n\nimport { mount } from 'cypress/react18'\n// import { Provider } from 'react-redux'\n// import { getStore } from '../../src/store'\n\n// Cypress.Commands.add('mount', (component, options = {}) => {\n//   // Use the default store if one is not provided\n//   const { reduxStore = getStore(), ...mountOptions } = options\n\n//   const wrapped = <Provider store={reduxStore}>{component}</Provider>\n\n//   return mount(wrapped, mountOptions)\n// })\n\n\n\n// Augment the Cypress namespace to include type definitions for\n// your custom command.\n// Alternatively, can be defined in cypress/support/component.d.ts\n// with a <reference path=\"./component\" /> at the top of your spec.\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount)\n\n// Cypress.Commands.add('mount', (component: React.ReactNode, options = {}) => {\n//   // Use defailt store if none are provided.\n//   const { reduxStore = getStore(), ...mountOptions } = options;\n\n//   const wrappedComponent = <Provider store={reduxStore}><>{component}</></Provider>;\n//   return mount(wrappedComponent, mountOptions);\n// });\n\n// Example use:\n// cy.mount(<MyComponent />)"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,YAAY;;AAEnB;AACA;;AAEA,SAASA,KAAK,QAAQ,iBAAiB;AACvC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;;AASAC,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,OAAO,EAAEH,KAAK,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}