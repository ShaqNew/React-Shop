{"ast":null,"code":"var _jsxFileName = \"/Users/snewell/Documents/practice/React_shop_copy/react-shop/cypress/support/commands.tsx\";\n/// <reference types=\"cypress\" />\n// ***********************************************\n// This example commands.ts shows you how to\n// create various custom commands and overwrite\n// existing commands.\n//\n// For more comprehensive examples of custom\n// commands please read more here:\n// https://on.cypress.io/custom-commands\n// ***********************************************\n//\n//\n// -- This is a parent command --\n// Cypress.Commands.add('login', (email, password) => { ... })\n//\n//\n// -- This is a child command --\n// Cypress.Commands.add('drag', { prevSubject: 'element'}, (subject, options) => { ... })\n//\n//\n// -- This is a dual command --\n// Cypress.Commands.add('dismiss', { prevSubject: 'optional'}, (subject, options) => { ... })\n//\n//\n// -- This will overwrite an existing command --\n// Cypress.Commands.overwrite('visit', (originalFn, url, options) => { ... })\n//\n// declare global {\n//   namespace Cypress {\n//     interface Chainable {\n//       login(email: string, password: string): Chainable<void>\n//       drag(subject: string, options?: Partial<TypeOptions>): Chainable<Element>\n//       dismiss(subject: string, options?: Partial<TypeOptions>): Chainable<Element>\n//       visit(originalFn: CommandOriginalFn, url: string, options: Partial<VisitOptions>): Chainable<Element>\n//     }\n//   }\n// }\n\n// <reference types=\"cypress\" />\n\nimport { mount } from \"cypress/react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../../src/redux/store\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Use defailt store if none are provided.\n  const {\n    reduxStore = store,\n    ...mountOptions\n  } = options;\n  const wrappedComponent = /*#__PURE__*/_jsxDEV(Provider, {\n    store: reduxStore,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: component\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 30\n  }, this);\n  return mount(wrappedComponent, mountOptions);\n});","map":{"version":3,"names":["mount","Provider","store","Cypress","Commands","add","component","options","reduxStore","mountOptions","wrappedComponent"],"sources":["/Users/snewell/Documents/practice/React_shop_copy/react-shop/cypress/support/commands.tsx"],"sourcesContent":["/// <reference types=\"cypress\" />\n// ***********************************************\n// This example commands.ts shows you how to\n// create various custom commands and overwrite\n// existing commands.\n//\n// For more comprehensive examples of custom\n// commands please read more here:\n// https://on.cypress.io/custom-commands\n// ***********************************************\n//\n//\n// -- This is a parent command --\n// Cypress.Commands.add('login', (email, password) => { ... })\n//\n//\n// -- This is a child command --\n// Cypress.Commands.add('drag', { prevSubject: 'element'}, (subject, options) => { ... })\n//\n//\n// -- This is a dual command --\n// Cypress.Commands.add('dismiss', { prevSubject: 'optional'}, (subject, options) => { ... })\n//\n//\n// -- This will overwrite an existing command --\n// Cypress.Commands.overwrite('visit', (originalFn, url, options) => { ... })\n//\n// declare global {\n//   namespace Cypress {\n//     interface Chainable {\n//       login(email: string, password: string): Chainable<void>\n//       drag(subject: string, options?: Partial<TypeOptions>): Chainable<Element>\n//       dismiss(subject: string, options?: Partial<TypeOptions>): Chainable<Element>\n//       visit(originalFn: CommandOriginalFn, url: string, options: Partial<VisitOptions>): Chainable<Element>\n//     }\n//   }\n// }\n\n// <reference types=\"cypress\" />\n\nimport { mount } from \"cypress/react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../../src/redux/store\";\n\nCypress.Commands.add('mount', (component: React.ReactNode, options = {}) => {\n    // Use defailt store if none are provided.\n    const { reduxStore = store, ...mountOptions } = options;\n\n    const wrappedComponent = <Provider store={reduxStore}><>{component}</></Provider>;\n    return mount(wrappedComponent, mountOptions);\n});"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,KAAK,QAAQ,eAAe;AACrC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,KAAK,QAAQ,uBAAuB;AAAC;AAAA;AAE9CC,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,OAAO,EAAE,CAACC,SAA0B,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACxE;EACA,MAAM;IAAEC,UAAU,GAAGN,KAAK;IAAE,GAAGO;EAAa,CAAC,GAAGF,OAAO;EAEvD,MAAMG,gBAAgB,gBAAG,QAAC,QAAQ;IAAC,KAAK,EAAEF,UAAW;IAAA,uBAAC;MAAA,UAAGF;IAAS;EAAI;IAAA;IAAA;IAAA;EAAA,QAAW;EACjF,OAAON,KAAK,CAACU,gBAAgB,EAAED,YAAY,CAAC;AAChD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}