{"ast":null,"code":"// ***********************************************************\n// This example support/component.ts is processed and\n// loaded automatically before your test files.\n//\n// This is a great place to put global configuration and\n// behavior that modifies Cypress.\n//\n// You can change the location of this file or turn off\n// automatically serving support files with the\n// 'supportFile' configuration option.\n//\n// You can read more here:\n// https://on.cypress.io/configuration\n// ***********************************************************\n\n// Import commands.js using ES2015 syntax:\n// import './commands'\n\n// // Alternatively you can use CommonJS syntax:\n// // require('./commands')\n\n// import { mount } from 'cypress/react18'\n\n// // Augment the Cypress namespace to include type definitions for\n// // your custom command.\n// // Alternatively, can be defined in cypress/support/component.d.ts\n// // with a <reference path=\"./component\" /> at the top of your spec.\n// declare global {\n//   namespace Cypress {\n//     interface Chainable {\n//       mount: typeof mount\n//     }\n//   }\n// }\n\n// Cypress.Commands.add('mount', mount)\n\n// Example use:\n// cy.mount(<MyComponent />)\n\n// import { MountOptions, MountReturn } from 'cypress/react'\n// import { EnhancedStore } from '@reduxjs/toolkit'\n// import { RootState } from './src/StoreState'\n\n// declare global {\n//   namespace Cypress {\n//     interface Chainable {\n//       /**\n//        * Mounts a React node\n//        * @param component React Node to mount\n//        * @param options Additional options to pass into mount\n//        */\n//       mount(\n//         component: React.ReactNode,\n//         options?: MountOptions & { reduxStore?: EnhancedStore<RootState> }\n//       ): Cypress.Chainable<MountReturn>\n//     }\n//   }\n// }\n\nimport { mount } from 'cypress/react18';\nCypress.Commands.add('mount', (component, options) => {\n  // Wrap any parent components needed\n  // ie: return mount(<MyProvider>{component}</MyProvider>, options)\n  return mount(component, options);\n});","map":{"version":3,"names":["mount","Cypress","Commands","add","component","options"],"sources":["/Users/snewell/Documents/practice/React_shop_copy/react-shop/cypress/support/component.ts"],"sourcesContent":["// ***********************************************************\n// This example support/component.ts is processed and\n// loaded automatically before your test files.\n//\n// This is a great place to put global configuration and\n// behavior that modifies Cypress.\n//\n// You can change the location of this file or turn off\n// automatically serving support files with the\n// 'supportFile' configuration option.\n//\n// You can read more here:\n// https://on.cypress.io/configuration\n// ***********************************************************\n\n// Import commands.js using ES2015 syntax:\n// import './commands'\n\n// // Alternatively you can use CommonJS syntax:\n// // require('./commands')\n\n// import { mount } from 'cypress/react18'\n\n// // Augment the Cypress namespace to include type definitions for\n// // your custom command.\n// // Alternatively, can be defined in cypress/support/component.d.ts\n// // with a <reference path=\"./component\" /> at the top of your spec.\n// declare global {\n//   namespace Cypress {\n//     interface Chainable {\n//       mount: typeof mount\n//     }\n//   }\n// }\n\n// Cypress.Commands.add('mount', mount)\n\n// Example use:\n// cy.mount(<MyComponent />)\n\n// import { MountOptions, MountReturn } from 'cypress/react'\n// import { EnhancedStore } from '@reduxjs/toolkit'\n// import { RootState } from './src/StoreState'\n\n// declare global {\n//   namespace Cypress {\n//     interface Chainable {\n//       /**\n//        * Mounts a React node\n//        * @param component React Node to mount\n//        * @param options Additional options to pass into mount\n//        */\n//       mount(\n//         component: React.ReactNode,\n//         options?: MountOptions & { reduxStore?: EnhancedStore<RootState> }\n//       ): Cypress.Chainable<MountReturn>\n//     }\n//   }\n// }\n\n\n\n\nimport { mount } from 'cypress/react18'\n\nCypress.Commands.add('mount', (component: any, options) => {\n  // Wrap any parent components needed\n  // ie: return mount(<MyProvider>{component}</MyProvider>, options)\n  return mount(component, options)\n})"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,SAASA,KAAK,QAAQ,iBAAiB;AAEvCC,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,OAAO,EAAE,CAACC,SAAc,EAAEC,OAAO,KAAK;EACzD;EACA;EACA,OAAOL,KAAK,CAACI,SAAS,EAAEC,OAAO,CAAC;AAClC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}